{"version":3,"file":"static/js/803.25a5b2cc.chunk.js","mappings":"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","sources":["components/FullPageLoader.tsx","hooks/useNotification.tsx","screens/CreatePool/styles.ts","screens/CreatePool/SearchInput.tsx","hooks/useWindowFocus.ts","hooks/useInterval.ts","hooks/useContractPolling.ts","screens/CreatePool/index.tsx"],"sourcesContent":["import Backdrop from \"@mui/material/Backdrop\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport { styled, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { ReactNode } from \"react\";\nimport { isMobile } from \"react-device-detect\";\nimport { Adapters } from \"services/wallets/types\";\nimport { useWalletStore } from \"store/wallet/hooks\";\n\ninterface Props {\n  open: boolean;\n  children?: ReactNode;\n}\n\nconst StyledContainer = styled(Box)({\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  gap: 10,\n});\n\nfunction FullPageLoader({ open, children }: Props) {\n  const { adapterId } = useWalletStore();\n  const showReminderInLoader = !isMobile && adapterId === Adapters.TON_HUB;\n\n  return (\n    <Backdrop\n      sx={{\n        color: \"#fff\",\n        zIndex: (theme) => theme.zIndex.drawer + 1,\n        backdropFilter: \"blur(5px) \",\n      }}\n      open={open}\n    >\n      <StyledContainer>\n        <CircularProgress color=\"inherit\" />\n        {children}\n        {showReminderInLoader && (\n          <Typography>\n            Please check tonhub wallet for pending notification\n          </Typography>\n        )}\n      </StyledContainer>\n    </Backdrop>\n  );\n}\n\nexport default FullPageLoader;\n","import { ReactNode, useCallback } from \"react\";\nimport { VariantType, useSnackbar, SnackbarOrigin } from \"notistack\";\nimport { IconButton, styled } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport CloseIcon from \"@mui/icons-material/Close\";\n\nconst StyledMessage = styled(Box)({\n  \"& &\": {\n    color: \"white\",\n  },\n  \"& a\": {\n    color: \"white\",\n  },\n});\n\ninterface Params {\n  message: ReactNode | string;\n  variant: VariantType;\n  onClose?: () => void;\n  autoHideDuration?: number;\n  anchorOrigin?: SnackbarOrigin;\n  className?: string;\n}\n\nfunction useNotification() {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const showNotification = useCallback(\n    ({ message, variant, onClose, autoHideDuration, anchorOrigin, className = '' }: Params) => {\n      const key = enqueueSnackbar(<StyledMessage>{message}</StyledMessage>, {\n        className,\n        anchorOrigin: anchorOrigin,\n        variant,\n        autoHideDuration: autoHideDuration || 5000,\n        onClose,\n        onClick: () => closeSnackbar(key),\n        action: () => (\n          <IconButton>\n            <CloseIcon style={{ width: 20, height: 20 }} />\n          </IconButton>\n        ),\n      });\n    },\n    [closeSnackbar, enqueueSnackbar]\n  );\n\n  return { showNotification };\n}\n\nexport default useNotification;\n","import { Box } from \"@mui/material\";\nimport { styled } from \"@mui/styles\";\n\nexport const StyledContainer = styled(Box)({\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    paddingBottom: \"100px\",\n    paddingTop: 50,\n    width: \"100%\",\n    \"& .screen-title\": {\n      marginBottom: 30,\n    },\n  });","import { Box, TextField, Typography } from \"@mui/material\";\nimport { styled } from \"@mui/styles\";\nimport { useState } from \"react\";\nimport { Address } from \"ton\";\n\nconst StyledInputContainer = styled(Box)({\n    width: \"100%\",\n    marginBottom: 20,\n  });\n  \n  const StyledInputError = styled(Box)({\n    \"& p\": {\n      fontSize: 12,\n      color: \"red\",\n      marginTop: 5,\n    },\n  });\n  \n  interface SearchInputProps {\n    onSubmit: (value: string) => void;\n  }\n  \n  const SearchInput = ({ onSubmit }: SearchInputProps) => {\n    const [jettonAddress, setJettonAddress] = useState(\"\");\n    const [invalidAddress, setInvalidAddress] = useState(false);\n  \n    const onChange = async (jettonAddress: string) => {\n      setJettonAddress(jettonAddress);\n  \n      if (jettonAddress.length !== 48) {\n        return;\n      }\n  \n      try {\n        Address.parse(jettonAddress);\n        onSubmit(jettonAddress);\n  \n        if (invalidAddress) {\n          setInvalidAddress(false);\n        }\n      } catch (error) {\n        \n        setInvalidAddress(true);\n      }\n    };\n  \n    return (\n      <StyledInputContainer>\n        <TextField\n          className=\"input\"\n          fullWidth\n          label=\"Enter jetton minter address\"\n          value={jettonAddress}\n          placeholder=\"EQDrjaLahLkMB-hMCmkzOyBuHJ139ZUYmPHu6RRBKnbdLIYI\"\n          onChange={(e) => onChange(e.target.value)}\n          onFocus={() => setInvalidAddress(false)}\n        />\n        {invalidAddress && (\n          <StyledInputError>\n            <Typography>Invalid Address</Typography>\n          </StyledInputError>\n        )}\n      </StyledInputContainer>\n    );\n  };\n  \n\n  export default SearchInput","import { useEffect } from \"react\";\n\ninterface Props {\n  onFocus: () => void;\n  onBlur: () => void;\n}\n\nfunction useWindowVisibility({ onFocus, onBlur }: Props) {\n  useEffect(() => {\n    const func = () => {\n      if (document.visibilityState === \"visible\") {\n        onFocus();\n      } else {\n        onBlur();\n      }\n    };\n    document.addEventListener(\"visibilitychange\", func);\n\n    return () => {\n      document.removeEventListener(\"visibilitychange\", func);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n}\n\nexport default useWindowVisibility;\n","import { useCallback, useEffect, useRef } from \"react\";\n\nfunction useInterval(delay?: number) {\n  const intervalRef = useRef<any>();\n\n  const startInterval = (func: () => void) => {\n    intervalRef.current = setInterval(() => {\n      func();\n    }, delay || 1000);\n  };\n\n  const stopInterval = useCallback(() => {\n    clearInterval(intervalRef.current);\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      stopInterval();\n    };\n  }, [stopInterval]);\n\n  return { startInterval, stopInterval };\n}\n\nexport default useInterval;\n","import useWindowVisibility from \"hooks/useWindowFocus\";\nimport { useEffect, useRef } from \"react\";\nimport * as API from \"services/api\";\nimport useInterval from \"./useInterval\";\n\nconst pollTriesLimit = 40;\n\ninterface Props {\n  onFinish: () => void;\n  onTimeout: () => void;\n  contractAddress: string;\n}\n\ninterface Data extends Props {\n  pollTries: number;\n  isPollInProgress: boolean;\n}\n\nfunction useContractPolling() {\n  const { startInterval, stopInterval } = useInterval();\n  const data = useRef({} as Data);\n\n  const pollInterval = async () => {\n\n    const isDeployed = await API.isContractDeployed(\n      data.current.contractAddress\n    );\n\n    if (isDeployed) {\n      data.current.isPollInProgress = false;\n      stopPolling();\n      data.current.onFinish();\n      return \n    }\n\n\n    if (data.current.pollTries >= pollTriesLimit) {\n      stopPolling();\n      data.current.onTimeout();\n      data.current.isPollInProgress = false;\n      return \n    } \n   \n    data.current.pollTries++;\n  };\n\n  const poll = async ({\n    onFinish,\n    onTimeout,\n    contractAddress,\n  }: Props) => {\n\n    data.current = {\n      onFinish,\n      pollTries: 0,\n      isPollInProgress: true,\n      contractAddress,\n      onTimeout,\n    };\n    stopInterval();\n    startInterval(pollInterval);\n  };\n\n  const stopPolling = () => {\n    data.current.pollTries = 0;\n    stopInterval();\n  };\n\n  useEffect(() => {\n    return () => {\n      stopInterval();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onFocus = () => {\n    if (data.current.isPollInProgress) {\n      startInterval(pollInterval);\n    }\n  };\n\n  useWindowVisibility({ onFocus, onBlur: stopPolling });\n\n  return { poll, cancelPolling: stopPolling };\n}\n\nexport default useContractPolling;\n","import { Box, Typography } from \"@mui/material\";\nimport { ActionButton, ScreenTitle } from \"components\";\nimport { useState } from \"react\";\nimport { deployPool, poolStateInit } from \"services/api/deploy-pool\";\nimport { Address } from \"ton\";\nimport { walletService } from \"services/wallets/WalletService\";\nimport { getTokenBalanceByMinter, getTokenData } from \"services/api\";\nimport { fromNano } from \"ton\";\nimport BN from \"bn.js\";\nimport { PoolInfo } from \"services/api/addresses\";\nimport { delay, getRandomColor } from \"utils\";\nimport { styled } from \"@mui/styles\";\nimport FullPageLoader from \"components/FullPageLoader\";\nimport useNotification from \"hooks/useNotification\";\nimport { StyledContainer } from \"./styles\";\nimport SearchInput from \"./SearchInput\";\nimport useContractPolling from \"hooks/useContractPolling\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ROUTES } from \"router/routes\";\nimport { useTokensActions } from \"store/tokens/hooks\";\nimport { useWalletStore } from \"store/wallet/hooks\";\nimport useNavigateWithParams from \"hooks/useNavigateWithParams\";\n\nconst pollingDelay = 5000;\ninterface jettonData {\n  balance: BN;\n  name: string;\n  image: string;\n}\n\nconst StyledContent = styled(Box)({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  flexDirection: \"column\",\n  width: \"100%\",\n  maxWidth: 400,\n});\n\n function CreatePool() {\n  \n  const [jettonAddress, setJettonAddress] = useState(\"\");\n  const [tokenBalance, setTokenBalance] = useState<number | undefined>();\n  const [txLoading, setTxLoading] = useState(false);\n  const [getTokenLoading, setGetTokenLoading] = useState(false);\n  const [tokenData, setTokenData] = useState<jettonData | undefined>();\n  const { poll } = useContractPolling();\n  const {addToken} = useTokensActions()\n  const {adapterId, session} = useWalletStore()\n\n  const navigate = useNavigateWithParams()\n\n  const { showNotification } = useNotification();\n\n  const validateForm = () => {\n    return (\n      jettonAddress.length &&\n      Address.isFriendly(jettonAddress) &&\n      tokenData?.name\n    );\n  };\n\n  const onJettonAddressSubmit = async (jAddress: string) => {\n    try {\n      setGetTokenLoading(true);\n      setJettonAddress(jAddress);\n\n      const address = Address.parse(jAddress);\n\n      const jettonData = await getTokenData(address);\n      \n\n      const { futureAddress, isDeployed } = await poolStateInit(address, 0);\n\n      if (isDeployed) {\n        addNewPool(\n          futureAddress.toFriendly(),\n          address.toFriendly(),\n          jettonData\n        );\n\n        navigate(`${ROUTES.pool.base}/${futureAddress.toFriendly()}`);\n      } else {\n        const jd = await getTokenBalanceByMinter(address);\n        let balance = parseFloat(fromNano(jd.balance.toString()));\n        setTokenData(jettonData);\n        setTokenBalance(balance);\n        setGetTokenLoading(false);\n      }\n    } catch (e) {\n      if (e instanceof Error) {\n        console.log(e);\n        \n        setGetTokenLoading(false);\n        showNotification({\n          message: <>Something went wrong</>,\n          variant: \"error\",\n        });\n      }\n    }\n  };\n\n  const addNewPool = async (\n    newPool: string,\n    jAddress = jettonAddress,\n    jData = tokenData\n  ) => {\n    if (!jData) {\n      return;\n    }\n\n    const token: PoolInfo = {\n      name: jData.name,\n      ammMinter: newPool,\n      tokenMinter: jAddress,\n      color: getRandomColor(),\n      displayName: jData.name.toUpperCase(),\n      image: jData.image,\n      isCustom: true,\n    };\n    addToken(token);\n  };\n\n  const deployPoolTx = async () => {\n\n    try {\n      setTxLoading(true);\n      const tx = await deployPool(Address.parse(jettonAddress));\n\n      if (!tx) {\n        throw new Error(\"Transaction error\");\n      }\n\n      if (!tx || tx.error) {        \n        throw new Error(tx.error);\n      }\n      \n      await walletService.requestTransaction(\n        adapterId!!,\n        session,\n        tx\n      );\n\n      await delay(pollingDelay);\n\n      const onFinish = () => {\n        addNewPool(tx.to);\n        showNotification({\n          message: <>Pool deployed successfully</>,\n          variant: \"success\",\n        });\n        setTxLoading(false);\n        navigate(`${ROUTES.pool.base}/${tx.to}`);\n      };\n\n      const onTimeout = () => {\n        showNotification({\n          message: <>Something went wrong</>,\n          variant: \"error\",\n        });\n      };\n\n      poll({ onFinish, onTimeout, contractAddress: tx.to });\n    } catch (error) {\n      setTxLoading(false);\n      if (error instanceof Error) {\n        showNotification({\n          message: <>Something went wrong</>,\n          variant: \"error\",\n        });\n      }\n    }\n  };\n\n  return (\n    <StyledContainer>\n      <FullPageLoader open={txLoading}>\n        <Typography>Deploying pool...</Typography>\n      </FullPageLoader>\n      <FullPageLoader open={getTokenLoading}>\n        <Typography>Loading...</Typography>\n      </FullPageLoader>\n      <StyledContent>\n        <ScreenTitle title=\"Create a new Pool\" />\n        <SearchInput onSubmit={onJettonAddressSubmit} />\n\n        {tokenData && (\n          <TokenDetails tokenData={tokenData} tokenBalance={tokenBalance} />\n        )}\n\n        <ActionButton isDisabled={!validateForm()} onClick={deployPoolTx}>\n          Deploy Pool 🚀\n        </ActionButton>\n      </StyledContent>\n    </StyledContainer>\n  );\n}\n\ninterface TokenDetailsProps {\n  tokenBalance?: number;\n  tokenData: jettonData;\n}\n\nconst StyledTokenDetails = styled(Box)({\n  display: \"flex\",\n  alignItems: \"center\",\n  gap: 20,\n  marginTop: 20,\n  marginBottom: 40,\n  \"& .token-details-right\": {},\n  \"& img\": {\n    height: \"70px\",\n    width: \"70px\",\n  },\n  \"& p\": {\n    fontSize: 15,\n  },\n});\n\nconst TokenDetails = ({ tokenBalance, tokenData }: TokenDetailsProps) => {\n  return (\n    <StyledTokenDetails>\n      <img src={tokenData.image} alt=\"\" />\n      <Box className=\"token-details-right\">\n        <Typography>Name: {tokenData.name}</Typography>\n        {tokenBalance && (\n          <Typography> My Balance: {tokenBalance.toLocaleString()}</Typography>\n        )}\n      </Box>\n    </StyledTokenDetails>\n  );\n};\n\n\n\nexport default CreatePool"],"names":["StyledContainer","styled","Box","display","flexDirection","alignItems","gap","open","children","adapterId","useWalletStore","showReminderInLoader","isMobile","Adapters","sx","color","zIndex","theme","drawer","backdropFilter","StyledMessage","useSnackbar","enqueueSnackbar","closeSnackbar","showNotification","useCallback","message","variant","onClose","autoHideDuration","anchorOrigin","className","key","onClick","action","style","width","height","justifyContent","paddingBottom","paddingTop","marginBottom","StyledInputContainer","StyledInputError","fontSize","marginTop","onSubmit","useState","jettonAddress","setJettonAddress","invalidAddress","setInvalidAddress","onChange","length","Address","error","TextField","fullWidth","label","value","placeholder","e","target","onFocus","Typography","onBlur","useEffect","func","document","visibilityState","addEventListener","removeEventListener","delay","intervalRef","useRef","stopInterval","clearInterval","current","startInterval","setInterval","useInterval","data","pollInterval","API","contractAddress","isPollInProgress","stopPolling","onFinish","pollTries","onTimeout","poll","useWindowVisibility","cancelPolling","StyledContent","maxWidth","StyledTokenDetails","TokenDetails","tokenBalance","tokenData","src","image","alt","name","toLocaleString","setTokenBalance","txLoading","setTxLoading","getTokenLoading","setGetTokenLoading","setTokenData","useContractPolling","addToken","useTokensActions","session","navigate","useNavigateWithParams","useNotification","onJettonAddressSubmit","jAddress","address","getTokenData","jettonData","poolStateInit","futureAddress","isDeployed","addNewPool","toFriendly","ROUTES","getTokenBalanceByMinter","jd","balance","parseFloat","fromNano","toString","Error","console","log","newPool","jData","token","ammMinter","tokenMinter","getRandomColor","displayName","toUpperCase","isCustom","deployPoolTx","deployPool","tx","walletService","to","FullPageLoader","title","isDisabled"],"sourceRoot":""}