{"version":3,"file":"static/js/960.a25a6a35.chunk.js","mappings":"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","sources":["services/api/deploy-pool.ts","services/api/ops.ts","services/api/dex.ts","services/api/index.ts","store/wallet/utils.ts","store/tokens/hooks.ts"],"sourcesContent":["import BN from \"bn.js\";\nimport {\n  Address,\n  Cell,\n  contractAddress,\n  toNano,\n  TonClient,\n  beginDict,\n  beginCell,\n  StateInit,\n  Slice,\n} from \"ton\";\nimport { GAS_FEE, _getJettonBalance, getTokenData } from \".\";\nimport { DexActions } from \"./dex\";\nimport { Sha256 } from \"@aws-crypto/sha256-js\";\nimport { walletService } from \"services/wallets/WalletService\";\nimport { TransactionRequest } from \"services/wallets/types\";\nimport axios from \"axios\";\n\nconst POOL_INIT_COST = 0.15;\nconst SNAKE_PREFIX = 0x00;\nconst ONCHAIN_CONTENT_PREFIX = 0x00;\nconst OFFCHAIN_CONTENT_PREFIX = 0x01;\n\nexport type JettonMetaDataKeys =\n  | \"name\"\n  | \"description\"\n  | \"image\"\n  | \"symbol\"\n  | \"decimals\";\nconst sha256 = (str: string) => {\n  const sha = new Sha256();\n  sha.update(str);\n  return Buffer.from(sha.digestSync());\n};\n\nconst jettonOnChainMetadataSpec: {\n  [key in JettonMetaDataKeys]: \"utf8\" | \"ascii\" | undefined;\n} = {\n  name: \"utf8\",\n  description: \"utf8\",\n  image: \"ascii\",\n  symbol: \"utf8\",\n  decimals: \"utf8\",\n};\n\nlet rpcUrl = \"https://mainnet.tonhubapi.com/jsonRPC\";\n\nconst ammCode = ``;\nconst ammJettonWalletCode = ``;\n\nconst zeroAddress = Address.parse(\n  \"EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c\"\n);\n\n/* eslint no-eval: 0 */\nconst client = new TonClient({\n  endpoint: rpcUrl,\n});\n\nconst META_DATA_DEFUALT = {\n  description: \"LP Pool\",\n  //  decimals: \"9\",\n  image: \"https://www.linkpicture.com/q/download_183.png\",\n};\n\nexport async function poolStateInit(jettonMinter: Address, workchain: number) {\n // const jettonData = await getTokenData(jettonMinter);\n  let metadata = {\n      name: `LP-${jettonMinter.toFriendly()}`,\n      ...META_DATA_DEFUALT,\n  };\n  const { codeCell, initDataCell } = buildStateInit(metadata);\n  const futureAddress = await contractAddress({\n    workchain,\n    initialData: initDataCell,\n    initialCode: codeCell,\n  });\n  const isDeployed = await client.isContractDeployed(futureAddress);\n  return {\n    isDeployed,\n    futureAddress,\n    initDataCell,\n    codeCell,\n  };\n}\n\nexport async function deployPool(\n  jettonMinter: Address,\n  poolData = {},\n  workchain = 0\n) {\n  //:TransactionRequest {\n  const { futureAddress, initDataCell, codeCell } = await poolStateInit(\n    jettonMinter,\n    workchain\n  );\n\n  // if (await client.isContractDeployed(futureAddress)) {\n  //     return {\n  //         to: futureAddress.toFriendly(),\n  //         value: toNano(POOL_INIT_COST).toString(),\n  //         timeout: 5 * 60 * 1000,\n  //         stateInit: new StateInit({ data: initDataCell, code: codeCell }),\n  //         payload: \"\",\n  //         error: \"contract is already deployed\"\n  //     }\n  // }\n  return {\n    to: futureAddress.toFriendly(),\n    value: toNano(POOL_INIT_COST).toString(),\n    timeout: 5 * 60 * 1000,\n    stateInit: new StateInit({ data: initDataCell, code: codeCell }),\n    payload: \"\",\n    error: \"\",\n  };\n}\n\nfunction buildStateInit(contentData: { [s: string]: string }) {\n  const contentCell = buildJettonOnchainMetadata(contentData);\n  const dataCell = new Cell();\n  dataCell.bits.writeCoins(0); // total-supply\n  dataCell.bits.writeAddress(zeroAddress); // token_wallet_address starts as null\n  dataCell.bits.writeCoins(0); // ton-reserves\n  dataCell.bits.writeCoins(0); // token-reserves\n  dataCell.bits.writeAddress(Address.parse(\"EQAxZiaJf80xadJw4qvFN5WkNACXAP56Wa00svHTf4iAjpqy\"));  // TODO (admin client side is quite dangerous)\n  dataCell.refs.push(contentCell); // meta-data\n  dataCell.refs.push(Cell.fromBoc(ammJettonWalletCode)[0]); // wallet-code\n  return {\n    initDataCell: dataCell,\n    codeCell: Cell.fromBoc(ammCode)[0],\n  };\n}\n\nfunction base64ToCellCode(b64: string) {\n  return Cell.fromBoc(Buffer.from(b64, \"base64\"))[0];\n}\n\nfunction writeString(cell: Cell, str: string) {\n  for (let i = 0; i < str.length; i++) {\n    cell.bits.writeUint8(str.charCodeAt(i));\n  }\n}\n\nexport function buildJettonOnchainMetadata(data: {\n  [s: string]: string | undefined;\n}): Cell {\n  const KEYLEN = 256;\n  const dict = beginDict(KEYLEN);\n\n  Object.entries(data).forEach(([k, v]: [string, string | undefined]) => {\n    if (!jettonOnChainMetadataSpec[k as JettonMetaDataKeys])\n      throw new Error(`Unsupported onchain key: ${k}`);\n    if (v === undefined || v === \"\") return;\n\n    let bufferToStore = Buffer.from(\n      v,\n      jettonOnChainMetadataSpec[k as JettonMetaDataKeys]\n    );\n\n    const CELL_MAX_SIZE_BYTES = Math.floor(1023 / 8) - 1; // 1 snake prefix\n\n    const rootCell = new Cell();\n    let currentCell = rootCell;\n\n    while (bufferToStore.length > 0) {\n      currentCell.bits.writeUint8(SNAKE_PREFIX);\n      currentCell.bits.writeBuffer(bufferToStore.slice(0, CELL_MAX_SIZE_BYTES));\n      bufferToStore = bufferToStore.slice(CELL_MAX_SIZE_BYTES);\n      if (bufferToStore.length > 0) {\n        let newCell = new Cell();\n        currentCell.refs.push(newCell);\n        currentCell = newCell;\n      }\n    }\n\n    dict.storeRef(sha256(k), rootCell);\n  });\n\n  return beginCell()\n    .storeInt(ONCHAIN_CONTENT_PREFIX, 8)\n    .storeDict(dict.endDict())\n    .endCell();\n}\n\nexport type persistenceType =\n  | \"onchain\"\n  | \"offchain_private_domain\"\n  | \"offchain_ipfs\";\n\nexport async function readJettonMetadata(contentCell: Cell): Promise<{\n  persistenceType: persistenceType;\n  metadata: { [s in JettonMetaDataKeys]?: string };\n  isJettonDeployerFaultyOnChainData?: boolean;\n}> {\n  const contentSlice = contentCell.beginParse();\n\n  switch (contentSlice.readUint(8).toNumber()) {\n    case ONCHAIN_CONTENT_PREFIX:\n      return {\n        persistenceType: \"onchain\",\n        ...parseJettonOnchainMetadata(contentSlice),\n      };\n    case OFFCHAIN_CONTENT_PREFIX:\n      const { metadata, isIpfs } = await parseJettonOffchainMetadata(\n        contentSlice\n      );\n      return {\n        persistenceType: isIpfs ? \"offchain_ipfs\" : \"offchain_private_domain\",\n        metadata,\n      };\n    default:\n      throw new Error(\"Unexpected jetton metadata content prefix\");\n  }\n}\n\nasync function parseJettonOffchainMetadata(contentSlice: Slice): Promise<{\n  metadata: { [s in JettonMetaDataKeys]?: string };\n  isIpfs: boolean;\n}> {\n  const jsonURI = contentSlice.readRemainingBytes().toString(\"ascii\");\n  return {\n    metadata: (await axios.get(jsonURI)).data,\n    isIpfs: /(^|\\/)ipfs[.:]/.test(jsonURI),\n  };\n}\n\nexport function parseJettonOnchainMetadata(contentSlice: Slice): {\n  metadata: { [s in JettonMetaDataKeys]?: string };\n  isJettonDeployerFaultyOnChainData: boolean;\n} {\n  // Note that this relies on what is (perhaps) an internal implementation detail:\n  // \"ton\" library dict parser converts: key (provided as buffer) => BN(base10)\n  // and upon parsing, it reads it back to a BN(base10)\n  // tl;dr if we want to read the map back to a JSON with string keys, we have to convert BN(10) back to hex\n  const toKey = (str: string) => new BN(str, \"hex\").toString(10);\n  const KEYLEN = 256;\n\n  let isJettonDeployerFaultyOnChainData = false;\n\n  const dict = contentSlice.readDict(KEYLEN, (s) => {\n    let buffer = Buffer.from(\"\");\n\n    const sliceToVal = (s: Slice, v: Buffer) => {\n      s.toCell().beginParse();\n      if (s.readUint(8).toNumber() !== SNAKE_PREFIX)\n        throw new Error(\"Only snake format is supported\");\n\n      v = Buffer.concat([v, s.readRemainingBytes()]);\n      if (s.remainingRefs === 1) {\n        v = sliceToVal(s.readRef(), v);\n      }\n\n      return v;\n    };\n\n    if (s.remainingRefs === 0) {\n      isJettonDeployerFaultyOnChainData = true;\n      return sliceToVal(s, buffer);\n    }\n\n    return sliceToVal(s.readRef(), buffer);\n  });\n\n  const res: { [s in JettonMetaDataKeys]?: string } = {};\n\n  Object.keys(jettonOnChainMetadataSpec).forEach((k) => {\n    const val = dict\n      .get(toKey(sha256(k).toString(\"hex\")))\n      ?.toString(jettonOnChainMetadataSpec[k as JettonMetaDataKeys]);\n    if (val) res[k as JettonMetaDataKeys] = val;\n  });\n\n  return {\n    metadata: res,\n    isJettonDeployerFaultyOnChainData,\n  };\n}\n","export enum OPS {\n    Transfer = 0xf8a7ea5,\n    Transfer_notification = 0x7362d09c,\n    Internal_transfer = 0x178d4519,\n    Excesses = 0xd53276db,\n    Burn = 0x595f07bc,\n    Burn_notification = 0x7bdd97de,\n    ADD_LIQUIDITY = 22,\n    REMOVE_LIQUIDITY = 23,\n    SWAP_TOKEN = 24,\n    SWAP_TON = 25,\n    ClaimRewards = 0x5a3e000,\n    ClaimRewardsNotification = 0x5a3e001,\n}\n\nexport enum ERROR_CODES {\n    MinAmountOutIsInsufficient = 601,\n    ADD_LIQUIDITY_INSUFFICIENT_BALANCE = 103,\n    ADD_LIQUIDITY_WRONG_JETTON_SENDER = 76,\n}\n","import { Address, Cell } from \"ton\";\nimport BN from \"bn.js\";\nimport { OPS } from \"./ops\";\n\nexport class DexActions {\n    static async initData() {\n        let messageBody = new Cell();\n        messageBody.bits.writeUint(101, 32); // op\n        messageBody.bits.writeUint(1, 64); // query_id\n        return messageBody;\n    }\n\n    static addLiquidity(to: Address, jettonAmount: BN, responseDestination: Address, forwardTonAmount: BN = new BN(0), slippage: BN, tonLiquidity: BN) {\n        return DexActions.transferOverload(to, jettonAmount, responseDestination, forwardTonAmount, OPS.ADD_LIQUIDITY, slippage, tonLiquidity);\n    }\n\n    static transferOverload(\n        to: Address,\n        jettonAmount: BN,\n        responseDestination: Address,\n        forwardTonAmount: BN = new BN(0),\n        overloadOp: OPS.ADD_LIQUIDITY | OPS.SWAP_TOKEN,\n        overloadValue: BN,\n        tonLiquidity?: BN\n    ) {\n        console.log(`jettonAmount: ${jettonAmount.toString()} forwardTonAmount ${forwardTonAmount.toString()} => minAmount: ${overloadValue}`);\n        \n        let messageBody = new Cell();\n        messageBody.bits.writeUint(OPS.Transfer, 32); // action\n        messageBody.bits.writeUint(1, 64); // query-id\n        messageBody.bits.writeCoins(jettonAmount);\n        messageBody.bits.writeAddress(to);\n        messageBody.bits.writeAddress(responseDestination); // this address gets the ton leftovers\n        messageBody.bits.writeBit(false); // null custom_payload\n        messageBody.bits.writeCoins(forwardTonAmount);\n        messageBody.bits.writeBit(false); // forward_payload in this slice, not separate messageBody\n        messageBody.bits.writeUint(new BN(overloadOp), 32);\n        if (overloadOp === OPS.ADD_LIQUIDITY && tonLiquidity) {\n            messageBody.bits.writeUint(overloadValue, 32); // slippage\n            messageBody.bits.writeCoins(tonLiquidity);\n        } else if (overloadOp === OPS.SWAP_TOKEN) {\n            messageBody.bits.writeCoins(overloadValue); // min amount out\n        }\n        return messageBody;\n    }\n\n    static async transfer(to: Address, jettonAmount: BN) {\n        let messageBody = new Cell();\n        messageBody.bits.writeUint(OPS.Transfer, 32); // action\n        messageBody.bits.writeUint(1, 64); // query-id\n        messageBody.bits.writeCoins(jettonAmount);\n        messageBody.bits.writeAddress(to);\n        messageBody.bits.writeAddress(to);\n        messageBody.bits.writeBit(false); // null custom_payload\n        messageBody.bits.writeCoins(0);\n        return messageBody;\n    }\n\n    static removeLiquidity(amount: BN, responseAddress: Address) {\n        let messageBody = new Cell();\n        messageBody.bits.writeUint(OPS.Burn, 32); // action\n        messageBody.bits.writeUint(1, 64); // query-id\n        messageBody.bits.writeCoins(amount);\n        messageBody.bits.writeAddress(responseAddress);\n        return messageBody;\n    }\n\n    // Swap TON->TRC20\n    static async swapTon(tonToSwap: BN, minAmountOut: BN) {\n        console.log(`SwapTon tonToSwap:${tonToSwap.toString()} minAmountOut:${minAmountOut.toString()}`);\n        let cell = new Cell();\n        cell.bits.writeUint(OPS.SWAP_TON, 32); // action\n        cell.bits.writeUint(1, 64); // query-id\n        cell.bits.writeCoins(tonToSwap); // swapping amount of tons\n        cell.bits.writeCoins(minAmountOut); // minimum received\n        return cell;\n    }\n\n    // Swap Out TRC20 -> TON\n    static async swapToken(to: Address, jettonAmount: BN, responseDestination: Address, forwardTonAmount: BN = new BN(0), minAmountOut: BN) {\n        return DexActions.transferOverload(to, jettonAmount, responseDestination, forwardTonAmount, OPS.SWAP_TOKEN, minAmountOut);\n    }\n\n    // static async claimRewards() {\n    //     let messageBody = new Cell();\n    //     messageBody.bits.writeUint(CLAIM_REWARDS, 32); // action\n    //     messageBody.bits.writeUint(1, 64); // query-id\n    //     return messageBody;\n    // }\n\n    // static async updateAdminData(op: UPDATE_ACTIONS, allocPoints: BN) {\n    //     let messageBody = new Cell();\n    //     messageBody.bits.writeUint(new BN(op), 32); // action\n    //     messageBody.bits.writeUint(1, 64); // query-id\n    //     messageBody.bits.writeCoins(allocPoints);\n    //     return messageBody;\n    // }\n\n    static async mx() {\n        let messageBody = new Cell();\n        messageBody.bits.writeUint(new BN(5), 32); // action\n        messageBody.bits.writeUint(new BN(0), 64); // query_id\n        return messageBody;\n    }\n}\n","import { Address, Cell, toNano, TonClient, fromNano, Wallet } from \"ton\";\nimport { cellToString, delay, hexToBn } from \"utils\";\nimport { DexActions } from \"./dex\";\nimport { bytesToAddress, bytesToBase64, getToken, PoolInfo, Pools } from \"./addresses\";\nimport BN from \"bn.js\";\nimport { OPS } from \"./ops\";\nimport { LOCAL_STORAGE_ADDRESS } from \"consts\";\nimport { parseJettonOnchainMetadata } from \"./deploy-pool\";\nimport axios from \"axios\";\nimport store from \"store/store\";\nimport { getWalletAddress } from \"store/wallet/utils\";\n\nlet rpcUrl = \"https://mainnet.tonhubapi.com/jsonRPC\";\n\nif (document.location.href.indexOf(\"testnet=\") > -1) {\n  rpcUrl = \"https://testnet.tonhubapi.com/jsonRPC\";\n} else if (document.location.href.indexOf(\"sandbox=\") > -1) {\n  rpcUrl = \"https://sandbox.tonhubapi.com/jsonRPC\";\n}\n\n/* eslint no-eval: 0 */\nexport const client = new TonClient({\n  endpoint: rpcUrl,\n});\n\nexport enum GAS_FEE {\n  SWAP = 0.09,\n  FORWARD_TON = 0.05,\n  ADD_LIQUIDITY = 0.12,\n  REMOVE_LIQUIDITY = 0.08,\n}\n\nconst sleep = (milliseconds: number) => {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n};\n\nexport const isContractDeployed = (address: string) => {\n  return client.isContractDeployed(Address.parse(address));\n};\n\nconst callWithRetry = async (address: Address, method: string, params: any) => {\n  try {\n    return await client.callGetMethod(address, method, params);\n  } catch (ignore) {\n    await sleep(500);\n    return client.callGetMethod(address, method, params);\n  }\n};\n\nexport const getTokenBalance = async (token: PoolInfo) => {\n  const tokenData = await getToken(client, token.tokenMinter, getOwner());\n\n  //sending jetton master, + owner wallet will resolve to jetton wallet and fetch the balance\n\n  return getTokenBalanceByMinter(Address.parse(tokenData.tokenMinter!!));\n};\n\nexport const getLPTokenBalance = async (token: string) => {\n  const tokenData = await getToken(client, token, getOwner());\n  return _getJettonBalance(tokenData.lpWallet, Address.parse(tokenData.ammMinter!!));\n};\n\nexport const getTokensOfLPBalances = async (token: string) => {\n  const tokenObjects = await getToken(client, token, getOwner());\n  const [jettonData, lpBalance] = await Promise.all([\n    getPoolData(Address.parse(tokenObjects.ammMinter!!)),\n    getLPTokenBalance(token),\n  ]);\n  if (lpBalance.balance.toString() === \"0\") {\n    return [fromNano(\"0\"), fromNano(\"0\")];\n  }\n  const tonSide = lpBalance.balance\n    .mul(jettonData.tonReserves)\n    .div(jettonData.totalSupply);\n    \n  const tokenSide = lpBalance.balance\n    .mul(jettonData.tokenReserves)\n    .div(jettonData.totalSupply);\n\n  return [fromNano(tonSide), fromNano(tokenSide)];\n};\n\nfunction getOwner() {\n\n  const address = getWalletAddress()  \n  \n  if (!address) throw new Error(\"No owner logged in\");\n  return Address.parse(address as string);\n}\n\n\n\nexport async function _getJettonBalance(\n  jettonWallet: Address,\n  minterAddress?: Address\n) {\n  try {\n    console.log(\n      `_getJettonBalance::  jettonWallet at ${jettonWallet.toFriendly()}`\n    );\n\n    let res = await client.callGetMethod(jettonWallet, \"get_wallet_data\", []);\n    const balance = hexToBn(res.stack[0][1]);\n    const walletOwner = bytesToAddress(res.stack[1][1].bytes);\n    const jettonMaster = bytesToAddress(res.stack[2][1].bytes);\n    return {\n      balance,\n      walletOwner,\n      jettonMaster,\n    };\n  } catch (e) {\n    console.log(e);\n\n    return {\n      balance: new BN(0),\n      walletOwner: getOwner(),\n      jettonMaster: minterAddress,\n    };\n  }\n}\n\nexport const getTokenBalanceByMinter = async (minterAddress: Address) => {\n  let cell = new Cell();\n  cell.bits.writeAddress(getOwner());\n  const b64data = bytesToBase64(await cell.toBoc({ idx: false }));\n  const jettonWallet = await callWithRetry(\n    minterAddress,\n    \"get_wallet_address\",\n    [[\"tvm.Slice\", b64data]]\n  );\n\n  let jettonWalletAddress = bytesToAddress(jettonWallet.stack[0][1].bytes);\n  return _getJettonBalance(jettonWalletAddress, minterAddress);\n  // jettonWalletAddress = Address.parse(\"kQBaIvo07zP5git3cfVmImayYzTfhKT3L2wZmE2qBIVbaCXv\");\n};\n\nexport const getTonBalance = async () => {\n  const balance = await client.getBalance(getOwner());\n  \n  return fromNano(balance)\n};\n\nasync function getAmountOut(\n  minterAddress: Address,\n  amountIn: BN,\n  reserveIn: BN,\n  reserveOut: BN\n) {\n  console.log(`GetAmountOut(amountIn), (reserveIn), (reserveOut)`);\n  console.log(amountIn.toString(), reserveIn.toString(), reserveOut.toString());\n\n  let res = await client.callGetMethod(minterAddress, \"get_amount_out\", [\n    [\"num\", amountIn.toString()],\n    [\"num\", reserveIn.toString()],\n    [\"num\", reserveOut.toString()],\n  ]);\n\n  return hexToBn(res.stack[0][1]).toString();\n}\n\nexport async function tokenToMinter(token: string) {\n  return (await getToken(client, token, getOwner())).ammMinter;\n}\n\n// TODO move to contract so the contract will know what is fee\nfunction getAmountIn(amountOut: BN,  reserveIn : BN,  reserveOut: BN): BN {\n  let numerator = reserveIn.mul(amountOut).mul( new BN(1000));\n  let  denominator = reserveOut.sub(amountOut).mul(new BN(997));\n  let ret = numerator.div(denominator).add(new BN(1));\n  console.log('getAmountIn',ret.toString());\n  return ret;\n  \n}\n\nexport const getAmountsOut = async (\n  token: string,\n  isSourceToken: boolean,\n  srcAmount: BN | null,\n  destAmount: BN | null\n) => {\n  const tokenAmm = Pools()[token].ammMinter\n \n  if(!tokenAmm){\n    throw new Error('Amm address missing')\n  }\n\n  const tokenData = await getPoolData(Address.parse(tokenAmm!!));\n\n  if (srcAmount) {\n    // TODO\n    const amountIn = srcAmount;\n    if (isSourceToken) {\n      return getAmountOut(\n        Address.parse(tokenAmm!!),\n        amountIn,\n        tokenData.tokenReserves,\n        tokenData.tonReserves\n      );\n    } else {\n      \n      return getAmountOut(\n        Address.parse(tokenAmm!!),\n        amountIn,\n        tokenData.tonReserves,\n        tokenData.tokenReserves\n      );\n    }\n  } else {\n    // Dest amount\n    // when calculating in amount by inputing dest amount we reverse the isSourceToken falg\n    const amountIn = destAmount || new BN(0);\n    if (!isSourceToken) {\n      return getAmountIn(new BN(amountIn), tokenData.tonReserves, tokenData.tokenReserves)\n    } else {\n      return getAmountOut(\n        Address.parse(tokenAmm!!),\n        amountIn,\n        tokenData.tonReserves,\n        tokenData.tokenReserves\n      );\n    }\n  }\n};\n\nexport async function getPoolInfo(token: string) {\n  const tokenObjects: any = await getToken(client, token, getOwner());\n  return getPoolData(tokenObjects.ammMinter);\n}\n\nexport async function getPoolData(ammMinter: Address) {\n  let res = await client.callGetMethod(ammMinter, \"get_jetton_data\", []);\n\n  const totalSupply = hexToBn(res.stack[0][1]);\n  const mintable = res.stack[1][1] as string;\n  const jettonWalletAddressBytes = res.stack[2][1].bytes as string;\n  const tonReserves = hexToBn(res.stack[3][1]);\n  const tokenReserves = hexToBn(res.stack[4][1]);\n  const admin = res.stack[5][1].bytes as string;\n  return {\n    totalSupply,\n    jettonWalletAddress: bytesToAddress(jettonWalletAddressBytes),\n  //  adminAddress: bytesToAddress(admin),\n    mintable,\n    tonReserves,\n    tokenReserves,\n  };\n}\n\nexport async function getTokenData(jettonAddress: Address) {\n  let jettonDataRes = await client.callGetMethod(\n    jettonAddress,\n    \"get_jetton_data\",\n    []\n  );\n  const totalSupply = hexToBn(jettonDataRes.stack[0][1]);\n  const owner = b64ToCell(jettonDataRes.stack[2][1].bytes)\n    .beginParse()\n    .readAddress();\n\n  let cell = Cell.fromBoc(\n    Buffer.from(jettonDataRes.stack[3][1].bytes, \"base64\")\n  )[0];\n\n  // metadata is on chain\n\n  // metadata is string\n  //let uri = readString(cell);\n  let metadata;\n  try {\n    let uri = cellToString(cell);\n    //uri = \"https://api.npoint.io/402e32572b294e845cde\"\n    if (uri.length == 2) {\n      throw \"onchain data\";\n    }\n    let metadataRes = await fetch(uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\"));\n    metadata = await metadataRes.json();\n  } catch (e) {\n    metadata = parseJettonOnchainMetadata(cell.beginParse()).metadata;\n  }\n\n  metadata.image = metadata.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n\n  return {\n    owner,\n    totalSupply,\n    ...metadata,\n  };\n}\n\nexport const getLiquidityAmount = async (\n  srcToken: string,\n  destToken: string,\n  srcAmount: BN | null,\n  destAmount: BN | null\n): Promise<BN> => {\n  const tokenObjects: any = await getToken(\n    client,\n    srcToken !== \"ton\" ? srcToken : destToken,\n    getOwner()\n  );\n  const lpTokenData = await getPoolData(tokenObjects.ammMinter);\n\n  const tokenReserves = lpTokenData.tokenReserves;\n  const tonReserves = lpTokenData.tonReserves;\n  if (tokenReserves.toString() === \"0\" && tonReserves.toString() === \"0\") {\n    return new BN(0);\n  }\n\n  console.log(\n    `tokenReserves: ${fromNano(tokenReserves)} tonReserves: ${fromNano(\n      tonReserves\n    )}`\n  );\n\n  if (srcToken === \"ton\") {\n    if (srcAmount != null) {\n      return new BN(srcAmount).mul(tokenReserves).div(tonReserves);\n    } else if (destAmount != null) {\n      return toNano(destAmount).mul(tonReserves).div(tokenReserves);\n    }\n  } else {\n    if (srcAmount != null) {\n      return new BN(srcAmount).mul(tokenReserves).div(tonReserves);\n    } else if (destAmount != null) {\n      return new BN(destAmount).mul(tonReserves).div(tokenReserves);\n    }\n  }\n  return new BN(0);\n};\n\n\n\n\nexport const getTokenDollarValue = async (\n  token: string,\n  amount: string\n): Promise<string> => {\n  let ratio = 1;\n\n  if (token !== \"ton\") {\n    const tokenAmmMinter = Pools()[token].ammMinter\n    if(!tokenAmmMinter){\n      throw new Error('Amm minter missing')\n    }\n    const lpTokenData = await getPoolData(Address.parse(tokenAmmMinter));\n    const tokenReserves = lpTokenData.tokenReserves;\n    const tonReserves = lpTokenData.tonReserves;\n    ratio = parseFloat(\n      fromNano(tonReserves.mul(new BN(1e9)).div(tokenReserves))\n    );\n  }\n\n  const cgPrice = await fetchPrice();\n  const tonPriceWithAmount = toNano(amount)\n    .mul(toNano(cgPrice))\n    .div(new BN(1e9));\n\n  return fromNano(tonPriceWithAmount.mul(toNano(ratio)).div(new BN(1e9)));\n};\n\nlet tonPrice = 0;\n\nasync function fetchPrice() {\n  if (tonPrice) {\n    return tonPrice;\n  }\n  const coinsResponse = await fetch(\n    `https://api.coingecko.com/api/v3/simple/price?ids=the-open-network&vs_currencies=usd&include_market_cap=false&include_24hr_vol=false&include_24hr_change=false&include_last_updated_at=false`\n  );\n  const result = await coinsResponse.json();\n  tonPrice = parseFloat(result[\"the-open-network\"].usd);\n  setTimeout(() => (tonPrice = 0), 60 * 1000);\n  return tonPrice;\n}\n\nexport const generateSellLink = async (\n  token: string,\n  tokenAmount: string,\n  tonAmount: string\n) => {\n  const tokenData = await getToken(client, token, getOwner());\n  let transfer = DexActions.transferOverload(\n   Address.parse( tokenData.ammMinter!!),\n    toNano(tokenAmount),\n    getOwner(), // owner wallet should get jetton-wallet excess messages + tons\n    toNano(GAS_FEE.FORWARD_TON),\n    OPS.SWAP_TOKEN,\n    toNano(tonAmount).mul(new BN(995)).div(new BN(1000))\n  );\n  const boc64 = transfer.toBoc().toString(\"base64\");\n  const value = toNano(GAS_FEE.SWAP);\n  return sendTransaction(tokenData.jettonWallet, value, boc64);\n};\n\nexport const generateBuyLink = async (\n  token: string,\n  tonAmount: string,\n  tokenAmount: string\n) => {\n  // 0.5% slippage\n  //TODO add slippage explicit\n  let transfer = await DexActions.swapTon(\n    toNano(tonAmount),\n    toNano(tokenAmount).mul(new BN(995)).div(new BN(1000))\n    );\n    const boc64 = transfer.toBoc().toString(\"base64\");\n    const tokenObjects = await getToken(client, token, getOwner());\n    const value = toNano(tonAmount).add(toNano(GAS_FEE.SWAP));\n  return sendTransaction(Address.parse(tokenObjects.ammMinter!!), value, boc64);\n};\n\nexport const generateAddLiquidityLink = async (\n  token: string,\n  tonAmount: string,\n  tokenAmount: string\n) => {\n  const tokenData = await getToken(client, token, getOwner());\n  const slippage = new BN(5);\n  const transferAndLiq = await DexActions.addLiquidity(\n    Address.parse(tokenData.ammMinter!!),\n    toNano(tokenAmount),\n    getOwner(), // owner wallet should get jetton-wallet excess messages + tons\n    toNano(tonAmount).add(toNano(GAS_FEE.FORWARD_TON)),\n    slippage,\n    toNano(tonAmount) // TODO dust issue\n  );\n  const boc64 = transferAndLiq.toBoc().toString(\"base64\");\n  const value = toNano(tonAmount).add(toNano(GAS_FEE.ADD_LIQUIDITY));\n  return sendTransaction(tokenData.jettonWallet, value, boc64);\n};\n\nexport const generateRemoveLiquidityLink = async (\n  token: string,\n  tonAmount: number | string\n) => {\n  const tokenData = await getToken(client, token, getOwner());\n  const jettonData = await getPoolData(Address.parse(tokenData.ammMinter!!));\n\n  let shareToRemove = toNano(tonAmount)\n    .mul(jettonData.totalSupply)\n    .div(jettonData.tonReserves);\n\n  const userLpBalance = (await getLPTokenBalance(token)).balance;\n  // round up 98 and above to use the max lp\n  if (shareToRemove.mul(new BN(100)).div(userLpBalance).gte(new BN(98))) {\n    shareToRemove = userLpBalance;\n  }\n\n  const removeLiquidity = await DexActions.removeLiquidity(\n    shareToRemove,\n    getOwner()\n  );\n  const boc64 = removeLiquidity.toBoc().toString(\"base64\");\n  const tokenObjects: any = await getToken(client, token, getOwner());\n  const value = toNano(GAS_FEE.REMOVE_LIQUIDITY);\n  return sendTransaction(tokenObjects.lpWallet, value, boc64);\n};\n\nfunction sendTransaction(\n  to: Address,\n  value: BN,\n  boc64: string,\n  stateInit = null\n) {\n  \n  return {\n    to: to.toFriendly({bounceable: true}),\n    value: value.toString(),\n    timeout: 5 * 60 * 1000,\n    //stateInit,\n    payload: boc64,\n  };\n}\n\nexport async function waitForSeqno(wallet: Wallet) {\n  const seqnoBefore = await wallet.getSeqNo();\n\n  return async () => {\n    for (let attempt = 0; attempt < 25; attempt++) {\n      await delay(3000);\n      const seqnoAfter = await wallet.getSeqNo();\n      \n      if (seqnoAfter > seqnoBefore) return;\n    }\n    throw new Error(\"Timeout\");\n  };\n}\n\nfunction readString(cell: Cell) {\n  let str = \"\";\n  let slice = cell.beginParse();\n  let len = slice.readUint(10);\n  return slice.readBuffer(len.toNumber()).toString();\n}\n\nfunction readString2(cell: Cell) {\n  let str = \"\";\n  return cellToString;\n}\n\nfunction b64ToCell(b64: string) {\n  return Cell.fromBoc(Buffer.from(b64, \"base64\"))[0];\n}\n","import store from \"store/store\";\n\nexport const getWalletAddress = () =>  store.getState().wallet.address","import { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { PoolInfo } from \"services/api/addresses\";\nimport { RootState } from \"store/store\";\nimport { addToken } from \"./reducer\";\n\nexport function useTokensStore() {\n  const data = useSelector((state: RootState) => state.tokens);\n\n  return data;\n}\n\nexport const useTokensActions = (): {\n  addToken: (token: PoolInfo) => void;\n  getTokenById: (id: string) => PoolInfo | undefined;\n} => {\n  const {tokens} = useTokensStore()\n  const dispatch = useDispatch();\n\n  const add = useCallback(\n    (token: PoolInfo) => {\n      dispatch(addToken(token));\n    },\n    [dispatch]\n  );\n\n  \n  const getTokenById = useCallback(\n    (id: string) => {\n      return tokens.find(t => t.tokenMinter === id)\n    },\n    [dispatch, tokens]\n  );\n\n\n  return { addToken: add, getTokenById };\n};\n"],"names":["POOL_INIT_COST","sha256","str","sha","Sha256","update","Buffer","from","digestSync","jettonOnChainMetadataSpec","name","description","image","symbol","decimals","zeroAddress","Address","client","TonClient","endpoint","META_DATA_DEFUALT","poolStateInit","jettonMinter","workchain","metadata","toFriendly","buildStateInit","codeCell","initDataCell","contractAddress","initialData","initialCode","futureAddress","isContractDeployed","isDeployed","deployPool","to","value","toNano","toString","timeout","stateInit","StateInit","data","code","payload","error","contentData","contentCell","KEYLEN","dict","beginDict","Object","entries","forEach","k","v","Error","undefined","bufferToStore","CELL_MAX_SIZE_BYTES","Math","floor","rootCell","Cell","currentCell","length","bits","writeUint8","writeBuffer","slice","newCell","refs","push","storeRef","beginCell","storeInt","storeDict","endDict","endCell","buildJettonOnchainMetadata","dataCell","writeCoins","writeAddress","parseJettonOnchainMetadata","contentSlice","isJettonDeployerFaultyOnChainData","readDict","s","buffer","sliceToVal","toCell","beginParse","readUint","toNumber","concat","readRemainingBytes","remainingRefs","readRef","res","keys","val","get","BN","OPS","ERROR_CODES","DexActions","messageBody","writeUint","jettonAmount","responseDestination","forwardTonAmount","slippage","tonLiquidity","transferOverload","ADD_LIQUIDITY","overloadOp","overloadValue","console","log","Transfer","writeBit","SWAP_TOKEN","amount","responseAddress","Burn","tonToSwap","minAmountOut","cell","SWAP_TON","rpcUrl","document","location","href","indexOf","GAS_FEE","sleep","milliseconds","Promise","resolve","setTimeout","address","callWithRetry","method","params","callGetMethod","getTokenBalance","token","getToken","tokenMinter","getOwner","tokenData","getTokenBalanceByMinter","getLPTokenBalance","_getJettonBalance","lpWallet","ammMinter","getTokensOfLPBalances","tokenObjects","all","getPoolData","jettonData","lpBalance","balance","fromNano","tonSide","mul","tonReserves","div","totalSupply","tokenSide","tokenReserves","store","wallet","jettonWallet","minterAddress","hexToBn","stack","walletOwner","bytesToAddress","bytes","jettonMaster","bytesToBase64","toBoc","idx","b64data","jettonWalletAddress","getTonBalance","getBalance","getAmountOut","amountIn","reserveIn","reserveOut","getAmountIn","amountOut","numerator","denominator","sub","ret","add","getAmountsOut","isSourceToken","srcAmount","destAmount","tokenAmm","Pools","getPoolInfo","mintable","jettonWalletAddressBytes","getTokenData","jettonAddress","jettonDataRes","owner","b64ToCell","readAddress","uri","cellToString","fetch","replace","metadataRes","json","getLiquidityAmount","srcToken","destToken","lpTokenData","getTokenDollarValue","ratio","tokenAmmMinter","parseFloat","fetchPrice","cgPrice","tonPriceWithAmount","tonPrice","coinsResponse","result","usd","generateSellLink","tokenAmount","tonAmount","transfer","FORWARD_TON","boc64","SWAP","sendTransaction","generateBuyLink","swapTon","generateAddLiquidityLink","addLiquidity","transferAndLiq","generateRemoveLiquidityLink","shareToRemove","userLpBalance","gte","removeLiquidity","REMOVE_LIQUIDITY","bounceable","waitForSeqno","getSeqNo","seqnoBefore","attempt","delay","b64","useTokensStore","useSelector","state","tokens","useTokensActions","dispatch","useDispatch","addToken","useCallback","getTokenById","id","find","t"],"sourceRoot":""}